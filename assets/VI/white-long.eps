%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A323) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 2180 604
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 2180 604
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
673.79999 526.17999 m
747.41803 526.17999 l
747.41803 116.29 l
967.94 116.29 l
967.94 87.980003 l
673.79999 87.980003 l
673.79999 526.17999 l
673.79999 526.17999 l
h
W*
0 0 2180 604 rc
663.79999 536.17999 m
977.94 536.17999 l
977.94 77.980003 l
663.79999 77.980003 l
h
f
Q
q
1876.072 526.17999 m
2014.8101 526.17999 l
2037.66 526.17999 2059.104 523.39801 2079.1421 517.84802 c
2099.1641 512.28198 2116.572 504.16199 2131.3621 493.47 c
2146.136 482.77802 2157.8279 469.66599 2166.4319 454.14999 c
2175.022 438.61801 2179.332 420.91 2179.332 400.978 c
2179.332 381.06201 2175.188 363.70001 2166.9021 348.92599 c
2158.614 334.13599 2147.7119 321.87201 2134.1919 312.116 c
2120.656 302.362 2105.2461 295.134 2087.946 290.414 c
2070.646 285.69601 2053.072 283.336 2035.2581 283.336 c
2027.712 283.336 2019.726 283.53201 2011.348 283.95599 c
2002.954 284.38 1994.88 284.95401 1987.1219 285.69601 c
1979.364 286.422 1972.1801 287.20801 1965.572 288.056 c
1958.964 288.888 1953.67 289.82599 1949.694 290.884 c
1949.694 87.980003 l
1876.076 87.980003 l
1876.076 526.17999 l
1876.072 526.17999 l
h
1949.6899 315.41199 m
1957.8719 313.11401 1966.718 310.90601 1976.26 308.81799 c
1985.802 306.716 1995.512 305.672 2005.3719 305.672 c
2021.296 305.672 2035.194 308.03201 2047.05 312.75 c
2058.8921 317.46799 2068.752 323.95599 2076.616 332.24399 c
2084.48 340.53201 2090.3479 350.17999 2094.2339 361.19 c
2098.106 372.20001 2100.0559 383.996 2100.0559 396.578 c
2100.0559 411.26199 2097.4861 424.63 2092.344 436.68399 c
2087.2019 448.75201 2080.23 458.97601 2071.4299 467.354 c
2062.614 475.74799 2052.24 482.25 2040.292 486.862 c
2028.33 491.474 2015.536 493.78799 2001.91 493.78799 c
1949.6899 493.78799 l
1949.6899 315.41199 l
1949.6899 315.41199 l
h
W*
0 0 2180 604 rc
1866.072 536.17999 m
2189.332 536.17999 l
2189.332 77.980003 l
1866.072 77.980003 l
h
f
Q
q
1756.358 277.59399 m
1756.434 278.16 1756.55 278.716 1756.624 279.284 c
1757.96 289.53201 1758.662 299.948 1758.662 310.55399 c
1758.662 330.70001 1756.208 350.034 1751.29 368.56799 c
1746.384 387.10199 1739.474 404.41599 1730.568 420.54001 c
1721.65 436.64801 1710.83 451.30399 1698.094 464.49399 c
1685.358 477.68201 1671.26 489.01199 1655.812 498.48401 c
1640.35 507.95401 1623.614 515.26001 1605.62 520.40198 c
1587.6121 525.53003 1568.78 528.09998 1549.146 528.09998 c
1529.5 528.09998 1510.6801 525.53003 1492.672 520.40198 c
1474.6639 515.26001 1457.9301 507.95401 1442.468 498.48401 c
1427.004 489.01401 1412.918 477.68399 1400.184 464.49399 c
1397.3879 461.60001 1395.038 458.35999 1392.428 455.32401 c
1406.448 438.224 1417.564 419.164 1425.46 398.88599 c
1431.074 419.09201 1438.656 436.94199 1448.476 452.104 c
1459.756 469.534 1473.802 483.086 1490.6281 492.746 c
1507.442 502.42001 1526.958 507.25601 1549.1479 507.25601 c
1570.786 507.25601 1589.974 502.42001 1606.712 492.746 c
1623.432 483.086 1637.4919 469.534 1648.864 452.104 c
1660.22 434.68799 1668.864 413.93201 1674.778 389.86401 c
1680.6801 365.79599 1683.644 339.35999 1683.644 310.556 c
1683.644 309.63199 1683.58 308.758 1683.574 307.84 c
1683.572 307.84 l
1683.4821 293.77802 1682.714 280.23599 1681.254 267.224 c
1681.21 266.85599 1681.144 266.504 1681.1021 266.13599 c
1680.3979 260.03799 1679.564 254.03799 1678.552 248.17799 c
1677.464 241.89999 1676.2159 235.746 1674.778 229.73801 c
1671.8199 217.39799 1668.182 205.90199 1663.86 195.25 c
1659.542 184.59801 1654.542 174.78999 1648.8621 165.828 c
1646.0179 161.34599 1643.0081 157.112 1639.83 153.12 c
1631.882 143.144 1622.764 134.886 1612.7321 127.98 c
1610.724 126.596 1608.802 125.094 1606.712 123.834 c
1602.528 121.314 1598.1899 119.11 1593.702 117.222 c
1584.72 113.444 1575.126 110.928 1564.92 109.67 c
1559.814 109.042 1554.5601 108.728 1549.15 108.728 c
1532.5081 108.728 1517.368 111.556 1503.748 117.222 c
1499.2061 119.11 1494.832 121.314 1490.632 123.834 c
1486.424 126.35 1482.39 129.112 1478.532 132.12199 c
1470.812 138.138 1463.788 145.136 1457.4561 153.118 c
1454.292 157.108 1451.298 161.34399 1448.48 165.826 c
1437.2 183.75 1428.7 205.058 1422.97 229.73801 c
1421.798 234.78799 1418.35 254.888 1417.704 259.814 c
1416.12 271.93201 1414.8521 298.918 1414.8521 299.828 c
1414.8521 319.974 1412.4 340.21799 1407.4821 358.75201 c
1404.734 369.13 1401.2 379.03201 1397.198 388.64999 c
1391.576 402.888 1384.234 416.45801 1375.068 428.944 c
1368.76 437.996 1361.9919 446.69601 1354.286 454.67801 c
1341.55 467.866 1327.45 479.19601 1312.002 488.668 c
1296.54 498.138 1279.804 505.444 1261.812 510.586 c
1244.012 515.65399 1225.396 518.20203 1206.01 518.26202 c
1205.782 518.26398 1205.564 518.28601 1205.338 518.28601 c
1205.094 518.28601 1204.8621 518.26001 1204.62 518.26001 c
1185.2321 518.198 1166.6479 515.65002 1148.8621 510.586 c
1130.854 505.444 1114.118 498.138 1098.656 488.668 c
1083.194 479.198 1069.108 467.86801 1056.3719 454.67801 c
1043.636 441.48999 1032.818 426.83401 1023.912 410.724 c
1014.994 394.60001 1008.084 377.28601 1003.178 358.75201 c
998.26001 340.21799 995.80603 320.884 995.80603 300.73801 c
995.80603 280.18399 998.26001 260.444 1003.178 241.51801 c
1008.084 222.578 1014.994 204.856 1023.912 188.34 c
1032.818 171.82401 1043.6379 156.76199 1056.3719 143.166 c
1069.106 129.57001 1083.194 117.936 1098.656 108.262 c
1114.118 98.601997 1130.854 91.094002 1148.8621 85.762001 c
1166.868 80.431999 1185.688 77.758003 1205.3361 77.758003 c
1224.9659 77.758003 1243.802 80.43 1261.8101 85.762001 c
1279.804 91.092003 1296.538 98.601997 1312 108.262 c
1327.45 117.936 1341.55 129.57001 1354.2841 143.166 c
1357.12 146.194 1359.506 149.56599 1362.1541 152.73801 c
1347.554 169.158 1335.9399 187.48199 1327.3879 206.998 c
1321.736 187.778 1314.356 170.692 1305.05 156.006 c
1293.678 138.082 1279.618 124.08 1262.8979 114.014 c
1246.1639 103.934 1226.976 98.907997 1205.3361 98.907997 c
1183.146 98.907997 1163.6281 103.934 1146.814 114.014 c
1129.988 124.08 1115.9399 138.082 1104.662 156.006 c
1093.384 173.92999 1084.886 195.23801 1079.1541 219.918 c
1073.604 243.804 1070.808 269.87201 1070.634 298.022 c
1070.634 298.022 l
1070.808 326.168 1073.604 352.23801 1079.1541 376.12399 c
1084.886 400.802 1093.384 422.112 1104.662 440.03601 c
1115.9399 457.95999 1129.988 471.96201 1146.814 482.02802 c
1163.6281 492.108 1183.146 497.134 1205.3361 497.134 c
1226.974 497.134 1246.162 492.108 1262.8979 482.02802 c
1279.618 471.96201 1293.6801 457.95999 1305.05 440.03601 c
1316.408 422.112 1325.05 400.80399 1330.9659 376.12399 c
1336.682 352.23801 1339.58 326.17001 1339.762 298.026 c
1339.708 294.59399 1335.326 222.03799 1400.188 152.98599 c
1412.942 139.408 1427.01 127.756 1442.472 118.082 c
1457.934 108.422 1474.67 100.914 1492.676 95.582001 c
1497.178 94.25 1501.73 93.082001 1506.334 92.084 c
1515.542 90.084 1524.954 88.746002 1534.572 88.080002 c
1539.38 87.746002 1544.24 87.578003 1549.152 87.578003 c
1568.786 87.578003 1587.618 90.25 1605.626 95.582001 c
1623.62 100.912 1640.356 108.422 1655.818 118.082 c
1671.2679 127.756 1685.366 139.39 1698.1 152.98599 c
1704.468 159.784 1710.356 166.948 1715.7679 174.478 c
1721.1801 182.008 1726.116 189.90199 1730.574 198.16 c
1739.478 214.67599 1746.3879 232.45399 1751.2939 251.48199 c
1752.484 256.08401 1753.52 260.72601 1754.4139 265.40601 c
1755.184 269.43399 1755.7939 273.508 1756.358 277.59399 c
1756.358 277.59399 l
h
W*
0 0 2180 604 rc
985.80603 538.09998 m
1768.662 538.09998 l
1768.662 67.758003 l
985.80603 67.758003 l
h
f
Q
4 w
q
0 0 2180 604 rc
2 0 0 -2 4.6709995 599.77307 cm
5.8775001 38.611526 m
15.4805 27.528524 24.835501 16.733524 34.206501 5.9195251 c
36.912498 7.3335252 39.455502 8.848525 42.143501 10.033525 c
53.565498 15.069525 65.536499 16.087524 77.786499 14.495525 c
91.790497 12.675525 104.7915 8.0045252 116.6805 0.35052514 c
117.5495 -0.20847484 118.0735 -0.037474848 118.8065 0.43352515 c
130.9285 8.2215252 144.1815 12.915525 158.46651 14.587525 c
173.31551 16.325525 187.4735 14.335526 200.3725 6.1955252 c
200.5255 6.099525 200.7005 6.0385251 201.08949 5.8575253 c
210.4455 16.646524 219.8335 27.472525 229.4245 38.532524 c
227.6965 40.196526 225.9305 41.728523 224.35651 43.436523 c
212.2715 56.552525 206.7065 72.001526 208.12849 89.818527 c
208.6895 96.842522 210.6515 103.52653 213.8555 109.84553 c
220.0155 121.99552 225.4445 134.45552 229.45351 147.49852 c
233.4615 160.54053 235.82651 173.82452 235.1675 187.52753 c
234.3105 205.33653 227.74451 220.81453 215.9175 234.08653 c
206.5415 244.60852 195.3315 252.83853 182.94749 259.37952 c
173.7175 264.25452 164.10851 268.40753 154.75349 273.05453 c
143.10451 278.84052 131.77451 285.18353 121.5675 293.34052 c
120.2205 294.41751 118.9925 295.64352 117.7415 296.77151 c
105.2425 285.64651 90.7565 277.76053 75.782501 270.77853 c
66.082497 266.25653 56.282501 261.97653 47.1115 256.41653 c
34.844501 248.97952 23.6945 240.24353 14.9855 228.68353 c
6.3485003 217.21852 1.5015002 204.33052 0.30350024 190.02052 c
-0.94149977 175.14253 1.7715002 160.81053 6.1065001 146.70152 c
10.0775 133.77652 15.7395 121.55653 21.5795 109.38653 c
30.321501 91.168526 29.272501 73.095528 19.7735 55.426525 c
16.5235 49.380524 12.1875 44.142525 7.0965004 39.536526 c
6.7765002 39.248524 6.4075003 39.011524 5.8775001 38.611526 c
5.8775001 38.611526 l
h
S
2.5 w
2 0 0 -2 132.474 283.51999 cm
76.044998 0 m
55.223 16.285 42.583 23.653999 15.661 34.358002 c
17.169001 27.1 16.830999 26.725 19.299999 17.287001 c
15.954 14.771 12.513 11.878 9.066 8.7629995 c
4.7350001 25.216 0 54.057999 0 54.057999 c
0 54.057999 58.068001 33.276001 78.436996 13.459 c
77.778 8.7510004 76.994003 4.3460002 76.044998 0 c
76.044998 0 l
h
S
2 0 0 -2 249.724 345.96799 cm
13.313 0 m
22.367001 24.834999 25.469 39.132999 27.329 68.044998 c
20.892 64.369003 19.481001 64.039001 11.269 58.775002 c
7.842 61.18 4.0279999 63.558998 0 65.874001 c
14.31 75.077003 41.226002 89.027 41.226002 89.027 c
41.226002 89.027 39.405998 27.379 26.851999 1.883 c
22.171 1.0549999 17.739 0.44 13.313 0 c
13.313 0 l
h
S
2 0 0 -2 214.412 382.16919 cm
0 12.911588 m
26.417999 11.975588 40.973999 13.443587 69.045998 20.608587 c
63.561001 25.593588 62.811001 26.834587 55.266998 33.01759 c
56.494999 37.020588 57.578999 41.382587 58.535999 45.929588 c
71.710999 35.164589 93.294998 13.875587 93.294998 13.875587 c
93.294998 13.875587 34.102001 -3.4434123 5.974 0.6165877 c
3.7409999 4.8135877 1.786 8.8385878 0 12.911588 c
0 12.911588 l
h
S
2 0 0 -2 165.79601 477.974 cm
9.8470001 88.431 m
17.120001 63.016998 23.014999 49.625999 38.502998 25.143 c
41.549 31.900999 42.497002 32.995998 46.047001 42.082001 c
50.233002 42.151001 54.716999 42.467999 59.337002 42.963001 c
53.169998 27.106001 39.592999 0 39.592999 0 c
39.592999 0 4.8299999 50.944 0 78.949997 c
3.3010001 82.370003 6.5240002 85.473 9.8470001 88.431 c
9.8470001 88.431 l
h
S
2 0 0 -2 78.891998 378.32599 cm
74.912003 61.118 m
52.988998 46.347 42.076 36.604 23.576 14.307 c
30.944 13.498 32.278999 12.935 42.018002 12.367 c
43.376999 8.4069996 45.064999 4.2399998 46.962002 0 c
29.976 0.96499997 0 5.5009999 0 5.5009999 c
0 5.5009999 37.709 54.305 62.851002 67.553001 c
67.125 65.471001 71.072998 63.363998 74.912003 61.118 c
74.912003 61.118 l
h
S
ep
end
%%Trailer
%%EOF
