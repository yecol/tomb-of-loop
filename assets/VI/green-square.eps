%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A323) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 990 972
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 990 972
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.019607844 0.79607844 0.58431375 sc
q
0.912 295.41599 m
49.200001 295.41599 l
49.200001 26.554001 l
193.84801 26.554001 l
193.84801 7.9840002 l
0.91000003 7.9840002 l
0.91000003 295.41599 l
0.912 295.41599 l
h
W*
0 0 990 972 rc
-9.0900002 305.41599 m
203.84801 305.41599 l
203.84801 -2.016 l
-9.0900002 -2.016 l
h
f
Q
q
789.526 295.41599 m
880.52802 295.41599 l
895.51599 295.41599 909.58197 293.59 922.72601 289.95001 c
935.85999 286.29999 947.27802 280.97198 956.97803 273.95999 c
966.66998 266.94601 974.33801 258.34601 979.98199 248.168 c
985.61603 237.98 988.44397 226.364 988.44397 213.28999 c
988.44397 200.226 985.72601 188.838 980.28998 179.146 c
974.854 169.444 967.70203 161.39999 958.83398 155.002 c
949.95599 148.604 939.84802 143.862 928.5 140.76801 c
917.15198 137.674 905.62598 136.12601 893.94 136.12601 c
888.98999 136.12601 883.75201 136.254 878.258 136.532 c
872.75201 136.81 867.45599 137.186 862.36603 137.672 c
857.27802 138.14799 852.56598 138.664 848.22998 139.22 c
843.896 139.76601 840.42401 140.38 837.81403 141.07401 c
837.81403 7.9819999 l
789.526 7.9819999 l
789.526 295.41599 l
789.526 295.41599 l
h
837.81403 157.166 m
843.17999 155.658 848.98401 154.21001 855.242 152.842 c
861.50201 151.464 867.87 150.778 874.33801 150.778 c
884.784 150.778 893.90002 152.326 901.67603 155.42 c
909.44397 158.51401 915.90997 162.77 921.06799 168.20599 c
926.22601 173.642 930.07397 179.97 932.62402 187.192 c
935.164 194.414 936.44202 202.14999 936.44202 210.40401 c
936.44202 220.036 934.75598 228.804 931.38397 236.71001 c
928.01202 244.62601 923.43799 251.332 917.66602 256.82599 c
911.88202 262.332 905.078 266.59601 897.242 269.62201 c
889.396 272.64801 881.00403 274.16599 872.06598 274.16599 c
837.81403 274.16599 l
837.81403 157.166 l
837.81403 157.166 l
h
W*
0 0 990 972 rc
779.526 305.41599 m
998.44397 305.41599 l
998.44397 -2.0179999 l
779.526 -2.0179999 l
h
f
Q
q
711 132.36 m
711.04999 132.73199 711.12598 133.09599 711.17401 133.468 c
712.04999 140.19 712.51001 147.022 712.51001 153.978 c
712.51001 167.192 710.90198 179.87399 707.67401 192.032 c
704.45599 204.19 699.92401 215.54601 694.08197 226.12199 c
688.23199 236.688 681.13599 246.302 672.78198 254.952 c
664.42798 263.60199 655.17999 271.034 645.04797 277.246 c
634.90601 283.45801 623.92798 288.25 612.12598 291.62399 c
600.31403 294.98801 587.96198 296.67401 575.08197 296.67401 c
562.19598 296.67401 549.84998 294.98801 538.03802 291.62399 c
526.22601 288.25201 515.24799 283.45801 505.10599 277.246 c
494.96201 271.034 485.724 263.60199 477.37 254.952 c
475.53601 253.054 473.99399 250.92799 472.28201 248.938 c
481.478 237.722 488.76999 225.218 493.95001 211.918 c
497.63199 225.172 502.60599 236.88 509.04599 246.82401 c
516.44598 258.258 525.65802 267.146 536.69598 273.48199 c
547.72601 279.828 560.526 283 575.08197 283 c
589.276 283 601.862 279.828 612.84003 273.48199 c
623.80798 267.146 633.03003 258.25601 640.48999 246.82401 c
647.94 235.39999 653.60797 221.786 657.48798 205.998 c
661.35999 190.21001 663.30402 172.87 663.30402 153.978 c
663.30402 153.37199 663.26202 152.798 663.258 152.196 c
663.25598 152.196 l
663.19598 142.972 662.69202 134.09 661.73602 125.554 c
661.70801 125.312 661.664 125.082 661.63599 124.84 c
661.17401 120.84 660.62799 116.904 659.96399 113.06 c
659.25 108.942 658.43201 104.906 657.48798 100.964 c
655.54797 92.870003 653.16199 85.328003 650.32599 78.342003 c
647.49402 71.353996 644.21399 64.921997 640.48798 59.042 c
638.62201 56.102001 636.64801 53.324001 634.56201 50.706001 c
629.34998 44.164001 623.36798 38.745998 616.78601 34.216 c
615.46802 33.307999 614.20801 32.321999 612.836 31.497999 c
610.09198 29.846001 607.24597 28.4 604.302 27.16 c
598.40997 24.681999 592.11798 23.032 585.422 22.205999 c
582.07397 21.794001 578.62598 21.587999 575.078 21.587999 c
564.16199 21.587999 554.23199 23.441999 545.29602 27.16 c
542.31598 28.398001 539.448 29.844 536.69202 31.497999 c
533.93201 33.147999 531.28601 34.959999 528.75598 36.933998 c
523.69202 40.880001 519.086 45.470001 514.93201 50.706001 c
512.85602 53.324001 510.892 56.102001 509.04401 59.042 c
501.64401 70.800003 496.07001 84.776001 492.31201 100.964 c
491.54199 104.276 489.28201 117.462 488.858 120.692 c
487.82001 128.64 486.98801 146.342 486.98801 146.938 c
486.98801 160.15199 485.37799 173.42999 482.15399 185.588 c
480.35199 192.396 478.034 198.89 475.40799 205.2 c
471.72 214.53999 466.90399 223.44 460.892 231.63 c
456.754 237.56799 452.314 243.274 447.26001 248.50999 c
438.90601 257.16 429.65799 264.59201 419.52399 270.80399 c
409.38199 277.01599 398.40399 281.80801 386.60199 285.18201 c
374.92599 288.50601 362.71399 290.17801 350 290.21799 c
349.85199 290.22 349.70801 290.23401 349.56 290.23401 c
349.39999 290.23401 349.24799 290.21799 349.09 290.21799 c
336.37201 290.17801 324.18201 288.50601 312.51599 285.18399 c
300.70401 281.81201 289.72601 277.01801 279.58401 270.806 c
269.44199 264.59399 260.202 257.16199 251.84801 248.51199 c
243.494 239.86 236.39799 230.248 230.556 219.68201 c
224.70599 209.106 220.174 197.75 216.95599 185.592 c
213.73 173.43401 212.12 160.754 212.12 147.53799 c
212.12 134.056 213.73 121.108 216.95599 108.694 c
220.174 96.269997 224.70599 84.646004 230.556 73.814003 c
236.39799 62.98 243.494 53.099998 251.84801 44.181999 c
260.202 35.264 269.44 27.632 279.58401 21.285999 c
289.72601 14.95 300.70401 10.024 312.51599 6.5279999 c
324.32599 3.0320001 336.672 1.278 349.56 1.278 c
362.436 1.278 374.79199 3.0320001 386.604 6.5279999 c
398.40601 10.024 409.384 14.95 419.526 21.285999 c
429.66 27.632 438.90799 35.264 447.26199 44.181999 c
449.12201 46.167999 450.68799 48.380001 452.42401 50.459999 c
442.84799 61.23 435.228 73.25 429.62 86.050003 c
425.91199 73.442001 421.07199 62.236 414.96799 52.602001 c
407.51001 40.844002 398.28601 31.66 387.31799 25.058001 c
376.34 18.445999 363.754 15.15 349.56201 15.15 c
335.00601 15.15 322.20401 18.445999 311.17599 25.058001 c
300.14001 31.66 290.92401 40.846001 283.526 52.602001 c
276.12799 64.360001 270.55399 78.335999 266.79401 94.524002 c
263.15399 110.19 261.32001 127.29 261.20401 145.756 c
261.20401 145.756 l
261.31799 164.218 263.15201 181.31799 266.79401 196.98599 c
270.55399 213.174 276.12799 227.14999 283.526 238.908 c
290.92401 250.666 300.138 259.85001 311.17599 266.452 c
322.20599 273.064 335.008 276.35999 349.56201 276.35999 c
363.75601 276.35999 376.34201 273.064 387.31799 266.452 c
398.28601 259.85001 407.508 250.664 414.96799 238.908 c
422.418 227.14999 428.086 213.174 431.966 196.98599 c
435.716 181.31799 437.616 164.22 437.73599 145.758 c
437.70001 143.508 434.82599 95.914001 477.37201 50.619999 c
485.73801 41.714001 494.96399 34.07 505.108 27.724001 c
515.25 21.388 526.22803 16.462 538.03998 12.966 c
540.99402 12.092 543.97998 11.326 546.99799 10.672 c
553.03802 9.3599997 559.21198 8.4840002 565.52002 8.0459995 c
568.67401 7.8260002 571.862 7.7179999 575.08398 7.7179999 c
587.96399 7.7179999 600.31598 9.4720001 612.12799 12.968 c
623.92999 16.464001 634.90802 21.389999 645.04999 27.726 c
655.18402 34.071999 664.43201 41.703999 672.784 50.622002 c
676.96002 55.080002 680.82202 59.779999 684.37402 64.720001 c
687.92401 69.657997 691.16199 74.837997 694.086 80.253998 c
699.92603 91.087997 704.46002 102.748 707.67798 115.23 c
708.45801 118.25 709.138 121.292 709.724 124.364 c
710.22998 127.008 710.63 129.67999 711 132.36 c
711 132.36 l
h
W*
0 0 990 972 rc
202.12 306.67401 m
722.51001 306.67401 l
722.51001 -8.7220001 l
202.12 -8.7220001 l
h
f
Q
4 w
q
0 0 990 972 rc
2 0 0 -2 237.461 967.42908 cm
5.8785 38.611526 m
15.481501 27.528524 24.8365 16.733524 34.2075 5.9195251 c
36.913502 7.3335252 39.456501 8.848525 42.144501 10.033525 c
53.566502 15.069525 65.537498 16.087524 77.787498 14.495525 c
91.791504 12.675525 104.7925 8.0045252 116.6815 0.35052514 c
117.5505 -0.20847484 118.0745 -0.037474848 118.8075 0.43352515 c
130.9295 8.2215252 144.1825 12.915525 158.4675 14.587525 c
173.3165 16.325525 187.4745 14.335526 200.3725 6.1955252 c
200.5255 6.099525 200.7005 6.0385251 201.08949 5.8575253 c
210.4455 16.646524 219.8335 27.472525 229.4245 38.532524 c
227.6965 40.196526 225.9315 41.728523 224.35651 43.436523 c
212.2715 56.552525 206.7065 72.001526 208.12849 89.818527 c
208.6895 96.842522 210.6515 103.52653 213.8555 109.84553 c
220.0155 121.99552 225.4445 134.45552 229.45351 147.49852 c
233.4615 160.54053 235.82651 173.82452 235.1675 187.52753 c
234.3105 205.33653 227.74451 220.81453 215.9175 234.08653 c
206.5405 244.60852 195.3315 252.83853 182.94749 259.37952 c
173.7175 264.25452 164.10851 268.40753 154.75349 273.05453 c
143.10451 278.84052 131.77451 285.18353 121.5675 293.34052 c
120.2205 294.41751 118.9925 295.64352 117.7415 296.77151 c
105.2425 285.64651 90.7565 277.76053 75.782501 270.77853 c
66.082497 266.25653 56.281502 261.97653 47.1115 256.41653 c
34.844501 248.97952 23.6945 240.24353 14.9855 228.68353 c
6.3485003 217.21852 1.5015002 204.33052 0.30350024 190.02052 c
-0.94149977 175.14253 1.7715002 160.81053 6.1065001 146.70152 c
10.0775 133.77652 15.7395 121.55653 21.5795 109.38653 c
30.321501 91.168526 29.272501 73.095528 19.7735 55.426525 c
16.5235 49.380524 12.1875 44.142525 7.0965004 39.536526 c
6.7765002 39.248524 6.4085002 39.011524 5.8785 38.611526 c
5.8785 38.611526 l
h
S
2.5 w
2 0 0 -2 365.26401 651.17603 cm
76.044998 0 m
55.223 16.285 42.583 23.653999 15.661 34.356998 c
17.169001 27.099001 16.830999 26.724001 19.299999 17.285999 c
15.954 14.77 12.513 11.877 9.066 8.7620001 c
4.7350001 25.215 0 54.056999 0 54.056999 c
0 54.056999 58.068001 33.275002 78.436996 13.458 c
77.778999 8.7510004 76.995003 4.3449998 76.044998 0 c
76.044998 0 l
h
S
2 0 0 -2 482.51401 713.62598 cm
13.313 0 m
22.367001 24.836 25.469 39.132999 27.329 68.044998 c
20.892 64.369003 19.481001 64.039001 11.269 58.775002 c
7.842 61.18 4.0279999 63.558998 0 65.874001 c
14.31 75.077003 41.226002 89.027 41.226002 89.027 c
41.226002 89.027 39.405998 27.379 26.851999 1.883 c
22.172001 1.056 17.74 0.44 13.313 0 c
13.313 0 l
h
S
2 0 0 -2 447.202 749.8252 cm
0 12.911588 m
26.417999 11.975588 40.973999 13.443587 69.045998 20.608587 c
63.560001 25.593588 62.811001 26.834587 55.266998 33.01759 c
56.494999 37.020588 57.578999 41.382587 58.535999 45.929588 c
71.710999 35.164589 93.294998 13.875587 93.294998 13.875587 c
93.294998 13.875587 34.102001 -3.4434123 5.974 0.6165877 c
3.7409999 4.8125877 1.786 8.8375874 0 12.911588 c
0 12.911588 l
h
S
2 0 0 -2 398.59 845.63 cm
9.8459997 88.431 m
17.118999 63.016998 23.014 49.625999 38.502998 25.143 c
41.549 31.900999 42.497002 32.995998 46.047001 42.082001 c
50.233002 42.151001 54.716999 42.467999 59.337002 42.963001 c
53.169998 27.106001 39.592999 0 39.592999 0 c
39.592999 0 4.8299999 50.944 0 78.949997 c
3.299 82.370003 6.5229998 85.473 9.8459997 88.431 c
9.8459997 88.431 l
h
S
2 0 0 -2 311.686 745.98401 cm
74.911003 61.118 m
52.987999 46.347 42.075001 36.604 23.575001 14.307 c
30.943001 13.498 32.278 12.935 42.016998 12.367 c
43.375999 8.4069996 45.063 4.2399998 46.960999 0 c
29.975 0.96499997 0 5.5009999 0 5.5009999 c
0 5.5009999 37.709 54.305 62.851002 67.553001 c
67.124001 65.471001 71.070999 63.363998 74.911003 61.118 c
74.911003 61.118 l
h
S
ep
end
%%Trailer
%%EOF
