%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A323) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 2178 604
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 2178 604
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.019607844 0.79607844 0.58431375 sc
q
671.79999 526.242 m
745.41803 526.242 l
745.41803 116.352 l
965.94 116.352 l
965.94 88.042 l
671.79999 88.042 l
671.79999 526.242 l
671.79999 526.242 l
h
W*
0 0 2178 604 rc
661.79999 536.242 m
975.94 536.242 l
975.94 78.042 l
661.79999 78.042 l
h
f
Q
q
1874.072 526.242 m
2012.8101 526.242 l
2035.66 526.242 2057.104 523.46002 2077.1421 517.90997 c
2097.1641 512.34399 2114.572 504.224 2129.3621 493.53201 c
2144.1379 482.84 2155.8279 469.728 2164.4319 454.21201 c
2173.022 438.67999 2177.332 420.97198 2177.332 401.04001 c
2177.332 381.12399 2173.188 363.76199 2164.9021 348.98801 c
2156.614 334.198 2145.7119 321.93399 2132.1919 312.17999 c
2118.656 302.42599 2103.2461 295.19601 2085.946 290.478 c
2068.646 285.76001 2051.072 283.39999 2033.2581 283.39999 c
2025.712 283.39999 2017.728 283.59601 2009.348 284.01999 c
2000.954 284.444 1992.88 285.01801 1985.1219 285.76001 c
1977.364 286.48599 1970.1801 287.272 1963.572 288.12 c
1956.964 288.952 1951.67 289.89001 1947.694 290.948 c
1947.694 88.043999 l
1874.076 88.043999 l
1874.076 526.242 l
1874.072 526.242 l
h
1947.6899 315.474 m
1955.8719 313.17599 1964.718 310.96799 1974.26 308.88 c
1983.802 306.77802 1993.512 305.73401 2003.3719 305.73401 c
2019.296 305.73401 2033.194 308.09399 2045.05 312.81201 c
2056.8921 317.53 2066.752 324.01801 2074.616 332.306 c
2082.48 340.59399 2088.3479 350.242 2092.2339 361.25201 c
2096.106 372.26199 2098.0559 384.05801 2098.0559 396.64001 c
2098.0559 411.32401 2095.4861 424.69199 2090.344 436.746 c
2085.2019 448.814 2078.23 459.03799 2069.4299 467.41599 c
2060.614 475.81 2050.24 482.31201 2038.292 486.92401 c
2026.33 491.53601 2013.536 493.85001 1999.91 493.85001 c
1947.6899 493.85001 l
1947.6899 315.474 l
1947.6899 315.474 l
h
W*
0 0 2178 604 rc
1864.072 536.242 m
2187.332 536.242 l
2187.332 78.043999 l
1864.072 78.043999 l
h
f
Q
q
1754.358 277.65399 m
1754.434 278.22 1754.55 278.776 1754.624 279.34399 c
1755.96 289.59201 1756.662 300.008 1756.662 310.61401 c
1756.662 330.76001 1754.21 350.09399 1749.29 368.62799 c
1744.384 387.16199 1737.474 404.47601 1728.568 420.60001 c
1719.65 436.70801 1708.83 451.36401 1696.094 464.55399 c
1683.36 477.742 1669.26 489.07199 1653.812 498.54401 c
1638.35 508.01401 1621.614 515.32001 1603.62 520.46198 c
1585.6121 525.59003 1566.78 528.15997 1547.146 528.15997 c
1527.5 528.15997 1508.6801 525.59003 1490.672 520.46198 c
1472.6639 515.32001 1455.9301 508.01401 1440.468 498.54401 c
1425.004 489.07401 1410.918 477.74399 1398.184 464.55399 c
1395.3879 461.66 1393.038 458.42001 1390.428 455.384 c
1404.448 438.284 1415.564 419.224 1423.46 398.94601 c
1429.074 419.15201 1436.656 437.00201 1446.476 452.164 c
1457.756 469.59399 1471.802 483.146 1488.6281 492.806 c
1505.442 502.48001 1524.958 507.31601 1547.1479 507.31601 c
1568.788 507.31601 1587.974 502.48001 1604.712 492.806 c
1621.432 483.146 1635.4919 469.59399 1646.864 452.164 c
1658.22 434.74799 1666.864 413.992 1672.78 389.92401 c
1678.682 365.85599 1681.646 339.42001 1681.646 310.616 c
1681.646 309.69199 1681.582 308.81799 1681.578 307.89999 c
1681.576 307.89999 l
1681.486 293.83801 1680.718 280.29599 1679.2581 267.284 c
1679.214 266.91599 1679.1479 266.564 1679.106 266.19601 c
1678.402 260.09799 1677.568 254.09801 1676.556 248.23801 c
1675.468 241.96001 1674.22 235.806 1672.782 229.798 c
1669.824 217.45799 1666.186 205.96201 1661.864 195.31 c
1657.546 184.658 1652.546 174.85001 1646.866 165.888 c
1644.022 161.40601 1641.012 157.17 1637.834 153.17999 c
1629.886 143.20399 1620.7679 134.946 1610.736 128.03999 c
1608.728 126.656 1606.806 125.154 1604.7159 123.894 c
1600.532 121.374 1596.194 119.17 1591.7061 117.282 c
1582.724 113.504 1573.13 110.988 1562.924 109.73 c
1557.818 109.102 1552.564 108.788 1547.1541 108.788 c
1530.512 108.788 1515.3719 111.614 1501.752 117.282 c
1497.21 119.17 1492.8361 121.374 1488.636 123.894 c
1484.428 126.41 1480.394 129.172 1476.536 132.18201 c
1468.816 138.198 1461.792 145.196 1455.46 153.17799 c
1452.296 157.168 1449.302 161.40401 1446.484 165.886 c
1435.204 183.81 1426.704 205.118 1420.974 229.798 c
1419.802 234.84801 1416.356 254.948 1415.708 259.87399 c
1414.124 271.992 1412.856 298.978 1412.856 299.888 c
1412.856 320.034 1410.402 340.27802 1405.486 358.81201 c
1402.738 369.19 1399.204 379.09201 1395.202 388.70999 c
1389.58 402.948 1382.238 416.51801 1373.072 429.004 c
1366.764 438.056 1359.996 446.75601 1352.29 454.73801 c
1339.556 467.92599 1325.454 479.25601 1310.006 488.728 c
1294.5439 498.198 1277.808 505.504 1259.816 510.646 c
1242.016 515.71399 1223.4 518.26202 1204.014 518.32202 c
1203.786 518.32397 1203.568 518.34601 1203.342 518.34601 c
1203.098 518.34601 1202.866 518.32001 1202.624 518.32001 c
1183.236 518.258 1164.652 515.71002 1146.866 510.646 c
1128.858 505.504 1112.1219 498.198 1096.66 488.728 c
1081.198 479.258 1067.1121 467.92801 1054.376 454.73801 c
1041.642 441.54999 1030.822 426.89401 1021.916 410.784 c
1012.998 394.66 1006.086 377.34601 1001.182 358.81201 c
996.26398 340.27802 993.81 320.944 993.81 300.798 c
993.81 280.24399 996.26202 260.504 1001.182 241.578 c
1006.088 222.638 1012.998 204.916 1021.916 188.39999 c
1030.822 171.884 1041.642 156.82201 1054.376 143.226 c
1067.1121 129.63 1081.198 117.996 1096.66 108.322 c
1112.1219 98.662003 1128.858 91.153999 1146.866 85.821999 c
1164.8719 80.491997 1183.692 77.818001 1203.34 77.818001 c
1222.97 77.818001 1241.806 80.489998 1259.814 85.821999 c
1277.808 91.152 1294.542 98.662003 1310.004 108.322 c
1325.454 117.996 1339.554 129.63 1352.288 143.226 c
1355.124 146.254 1357.51 149.62601 1360.158 152.798 c
1345.558 169.218 1333.944 187.54201 1325.392 207.058 c
1319.74 187.838 1312.36 170.752 1303.054 156.06799 c
1291.682 138.144 1277.6219 124.142 1260.902 114.076 c
1244.166 103.996 1224.98 98.970001 1203.34 98.970001 c
1181.15 98.970001 1161.632 103.996 1144.818 114.076 c
1127.9919 124.142 1113.944 138.144 1102.666 156.06799 c
1091.3879 173.992 1082.89 195.3 1077.158 219.98 c
1071.608 243.866 1068.812 269.93399 1068.6379 298.08401 c
1068.6379 298.08401 l
1068.812 326.23001 1071.608 352.29999 1077.158 376.186 c
1082.89 400.86401 1091.3879 422.17401 1102.666 440.09799 c
1113.946 458.022 1127.9919 472.02399 1144.818 482.09 c
1161.632 492.17001 1181.15 497.19601 1203.34 497.19601 c
1224.98 497.19601 1244.166 492.17001 1260.902 482.09 c
1277.6219 472.02399 1291.682 458.022 1303.054 440.09799 c
1314.41 422.17401 1323.054 400.866 1328.968 376.186 c
1334.684 352.29999 1337.582 326.23199 1337.764 298.08801 c
1337.71 294.65601 1333.328 222.10001 1398.1899 153.048 c
1410.944 139.47 1425.012 127.818 1440.474 118.144 c
1455.936 108.484 1472.672 100.976 1490.678 95.643997 c
1495.1801 94.311996 1499.7321 93.143997 1504.3361 92.146004 c
1513.5439 90.146004 1522.9561 88.807999 1532.574 88.141998 c
1537.382 87.807999 1542.2419 87.639999 1547.1541 87.639999 c
1566.788 87.639999 1585.62 90.311996 1603.6281 95.643997 c
1621.6219 100.974 1638.358 108.484 1653.8199 118.144 c
1669.27 127.818 1683.368 139.452 1696.1021 153.048 c
1702.47 159.84599 1708.358 167.00999 1713.77 174.53999 c
1719.182 182.07001 1724.118 189.964 1728.576 198.222 c
1737.48 214.73801 1744.39 232.51601 1749.296 251.54401 c
1750.486 256.146 1751.522 260.78799 1752.416 265.46799 c
1753.184 269.496 1753.7939 273.57001 1754.358 277.65399 c
1754.358 277.65399 l
h
W*
0 0 2178 604 rc
983.81 538.15997 m
1766.662 538.15997 l
1766.662 67.818001 l
983.81 67.818001 l
h
f
Q
4 w
q
0 0 2178 604 rc
2 0 0 -2 4.6689997 599.83307 cm
5.8785 38.611526 m
15.4825 27.528524 24.8365 16.733524 34.2075 5.9195251 c
36.913502 7.3335252 39.456501 8.848525 42.144501 10.033525 c
53.566502 15.069525 65.537498 16.087524 77.787498 14.495525 c
91.791504 12.675525 104.7925 8.0045252 116.6815 0.35052514 c
117.5505 -0.20847484 118.0745 -0.037474848 118.8075 0.43352515 c
130.9295 8.2215252 144.1825 12.915525 158.4675 14.587525 c
173.3165 16.325525 187.4745 14.335526 200.3725 6.1955252 c
200.5255 6.099525 200.7005 6.0385251 201.08949 5.8575253 c
210.4455 16.646524 219.8335 27.472525 229.4245 38.532524 c
227.6965 40.196526 225.9315 41.728523 224.35651 43.436523 c
212.2715 56.552525 206.7065 72.001526 208.12849 89.818527 c
208.6895 96.842522 210.6515 103.52653 213.8555 109.84553 c
220.0155 121.99552 225.4445 134.45552 229.45351 147.49852 c
233.4615 160.54053 235.82651 173.82452 235.1675 187.52753 c
234.3105 205.33653 227.74451 220.81453 215.9175 234.08653 c
206.5405 244.60852 195.3315 252.83853 182.94749 259.37952 c
173.7175 264.25452 164.10851 268.40753 154.75349 273.05453 c
143.10451 278.84052 131.77451 285.18353 121.5675 293.34052 c
120.2205 294.41751 118.9925 295.64352 117.7415 296.77151 c
105.2425 285.64651 90.7565 277.76053 75.782501 270.77853 c
66.082497 266.25653 56.281502 261.97653 47.1115 256.41653 c
34.844501 248.97952 23.6945 240.24353 14.9855 228.68353 c
6.3485003 217.21852 1.5015002 204.33052 0.30350024 190.02052 c
-0.94149977 175.14253 1.7715002 160.81053 6.1065001 146.70152 c
10.0775 133.77652 15.7395 121.55653 21.5795 109.38653 c
30.321501 91.168526 29.272501 73.095528 19.7735 55.426525 c
16.5235 49.380524 12.1875 44.142525 7.0965004 39.536526 c
6.7775002 39.247524 6.4085002 39.011524 5.8785 38.611526 c
5.8785 38.611526 l
h
S
2.5 w
2 0 0 -2 132.474 283.582 cm
76.044998 0 m
55.223 16.285 42.583 23.653999 15.661 34.356998 c
17.167999 27.099001 16.830999 26.724001 19.299999 17.285999 c
15.954 14.77 12.513 11.877 9.066 8.7620001 c
4.7350001 25.215 0 54.056999 0 54.056999 c
0 54.056999 58.068001 33.275002 78.436996 13.458 c
77.778 8.7510004 76.994003 4.3460002 76.044998 0 c
76.044998 0 l
h
S
2 0 0 -2 249.722 346.03 cm
13.314 0 m
22.368 24.836 25.469999 39.132999 27.33 68.044998 c
20.893 64.369003 19.482 64.039001 11.27 58.775002 c
7.8429999 61.18 4.0289998 63.558998 0 65.874001 c
14.31 75.077003 41.226002 89.027 41.226002 89.027 c
41.226002 89.027 39.405998 27.379 26.851999 1.883 c
22.172001 1.056 17.74 0.44 13.314 0 c
13.314 0 l
h
S
2 0 0 -2 214.412 382.22919 cm
0 12.911588 m
26.417999 11.975588 40.973999 13.443587 69.045998 20.608587 c
63.561001 25.593588 62.811001 26.834587 55.266998 33.01759 c
56.494999 37.020588 57.578999 41.382587 58.535999 45.929588 c
71.710999 35.164589 93.294998 13.875587 93.294998 13.875587 c
93.294998 13.875587 34.102001 -3.4434123 5.974 0.6165877 c
3.7409999 4.8125877 1.786 8.8375874 0 12.911588 c
0 12.911588 l
h
S
2 0 0 -2 165.79601 478.03601 cm
9.8470001 88.431 m
17.120001 63.016998 23.014999 49.625999 38.502998 25.142 c
41.549 31.9 42.497002 32.994999 46.047001 42.082001 c
50.233002 42.151001 54.716999 42.467999 59.337002 42.963001 c
53.169998 27.106001 39.592999 0 39.592999 0 c
39.592999 0 4.8299999 50.944 0 78.949997 c
3.3010001 82.370003 6.5240002 85.473999 9.8470001 88.431 c
9.8470001 88.431 l
h
S
2 0 0 -2 78.891998 378.388 cm
74.912003 61.118 m
52.988998 46.347 42.076 36.604 23.576 14.307 c
30.944 13.498 32.278999 12.935 42.018002 12.367 c
43.376999 8.4069996 45.064999 4.2399998 46.962002 0 c
29.976 0.96499997 0 5.5009999 0 5.5009999 c
0 5.5009999 37.709 54.305 62.851002 67.553001 c
67.125 65.471001 71.072998 63.363998 74.912003 61.118 c
74.912003 61.118 l
h
S
ep
end
%%Trailer
%%EOF
